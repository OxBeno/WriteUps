While exploring the profile picture upload feature on a web application, I stumbled upon a significant vulnerability that ultimately led to Remote Code Execution (RCE). Here’s how the situation unfolded:

Discovery
The feature allowed users to upload profile pictures, and at first glance, it seemed to accept only image files. Curious about its robustness, I decided to test whether it strictly validated file types and content.

The Exploit
I began by uploading a standard image file, which the server processed without issues. To test further, I modified the file in the following way:

File Extension Change:
I renamed the file from something like profile.jpg to profile.php. This change aimed to check if the server validated extensions on the backend.
2. Header Manipulation:
In the upload request, I altered the Content-Type header from image/jpeg to application/x-php to see if the server was relying on MIME types for validation.

The server accepted the file , indicating that the backend didn’t enforce strict validation. This was my first red flag, suggesting that it might allow arbitrary file uploads!!!

Injecting Payloads
To test the severity of the vulnerability, I created a PHP file with the following content:

<?php echo file_get_contents("/etc/passwd"); ?>
This payload, if executed, would expose sensitive system information. I uploaded this file using the same process, and the server once again accepted it.

And the surprise is that when I injected this code into the content type, it was Executed !!

Execution
The final step was to confirm if the uploaded PHP file was being stored in a web-accessible location. I navigated to the URL provided after the upload and executed the file. The payload ran successfully, displaying the contents of /etc/passwd in my browser Successfully!.
